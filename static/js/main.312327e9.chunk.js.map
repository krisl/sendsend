{"version":3,"sources":["../node_modules/peerjs/dist sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","stopEvent","preventDefault","stopPropagation","getPeerId","hash","window","location","replace","App","_useState","useState","loading","_useState2","Object","slicedToArray","sessionState","setSessionState","_useState3","_useState4","dropState","setDropState","_useState5","_useState6","file","setFile","useEffect","session","Peer","console","log","on","peerId","connect","label","data","s","objectSpread","waiting","o","d","constructor","ArrayBuffer","dataView","Uint8Array","dataBlob","Blob","type","url","URL","createObjectURL","completed","size","name","connectToHost","react_default","a","createElement","className","style","display","onDragOver","onDragEnter","onDragLeave","onDrop","dataTransfer","files","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","theFile","connection","transferring","x","send","persist","Fragment","concat","target","href","download","document","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.312327e9.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 13;","import React, { useEffect, useState } from 'react';\nimport Peer from 'peerjs';\nimport './App.css';\n\nfunction stopEvent (e) {\n  e.preventDefault()\n  e.stopPropagation()\n}\n\nconst getPeerId = () => {\n  const hash = window.location.hash\n  if (hash && typeof hash === 'string')\n    return hash.replace(/\\W/g, '')\n}\n\nfunction App() {\n  const [sessionState, setSessionState] = useState({loading: true})\n  const [dropState, setDropState] = useState()\n  const [file, setFile] = useState()\n  useEffect(\n    () => {\n      const session = new Peer()\n      console.log({session})\n      session.on('open', id => {\n        console.log({id})\n        setSessionState({loading: false, id, session})\n\n        const peerId = getPeerId()\n        if (peerId) {\n          console.log('need to connect to ' + peerId)\n\n          const connectToHost = peerId => {\n            // make a file and data connection\n            const file = session.connect(peerId, {label: 'FILE'})\n            const data = session.connect(peerId, {label: 'DATA'})\n            setSessionState(s => ({...s, loading: false, waiting: true}))\n\n            file.on('open', (o) => {\n              console.log('file connection open', o);\n              file.on('data', (d) => {\n                console.log('fdata', {d})\n                const file = d.file\n                if (file && file.constructor === ArrayBuffer) {\n                  const dataView = new Uint8Array(file)\n                  const dataBlob = new Blob([dataView], {type: d.type})\n                  const url = window.URL.createObjectURL(dataBlob)\n                  setSessionState(s => ({...s, completed: true, url, type: d.type, size: d.size, name: d.name, dataBlob}))\n                } else {\n                  console.log('oops')\n                }\n              })\n            })\n\n            data.on('open', (o) => {\n              console.log('data connection open', o);\n              data.on('data', (d) => console.log('ddata', {d}))\n            })\n\n            file.on('error', e => console.log('file error', e))\n            data.on('error', e => console.log('data error', e))\n          }\n\n          connectToHost(peerId)\n        }\n      })\n    },\n    []\n  )\n\n  const listenForPeer = file => {\n    sessionState.session.on('connection', connection => {\n      if (connection.label === 'FILE') {\n        console.log('incomming file connection');\n        setSessionState(s => ({...s, loading: false, transferring: true}))\n        connection.on('open', (x) => {\n          console.log('incomming file connection open', connection)\n          connection.send({file, name: file.name, size: file.size, type: file.type})\n        })\n      }\n\n      if (connection.label === 'DATA') {\n        console.log('incomming data connection');\n        connection.on('open', () => {\n          console.log('incomming data connection open', connection)\n          connection.send({name: 'bobx'})\n        })\n      }\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"droparea\"\n        style={\n          (console.log({sessionState}) || sessionState.waiting || dropState === 'WAITING')\n            ? {display: 'none'}\n            : {}\n        }\n        onDragOver={e => {console.log('dragover'); stopEvent(e)}}\n        onDragEnter={e => {\n          console.log('dragenter', e);\n          setDropState('HOVER')\n          stopEvent(e)\n        }}\n        onDragLeave={e => {\n          console.log('dragleave', e);\n          setDropState()\n          stopEvent(e)\n        }}\n        onDrop={e => {\n          console.log('drop', e);\n          console.log('files', e.dataTransfer.files.length)\n          for (const file of e.dataTransfer.files) {\n            console.log(file)\n          }\n          const theFile = e.dataTransfer.files[0]\n          setDropState('WAITING')\n          setFile(theFile)\n          listenForPeer(theFile)\n          stopEvent(e)\n          e.persist()\n        }}\n      />\n      <div id=\"container\">\n        <div id=\"header\">\n          <h1>\n            SendSend\n          </h1>\n          <h2>\n            Peer to peer single file transfer\n          </h2>\n        </div>\n        <div\n          id=\"status\"\n          className={\n            sessionState.id\n              ? dropState === 'HOVER'\n                ? 'hover'\n                : sessionState.waiting ? '...waiting' : 'ready'\n              : ''\n          }\n        >\n          <div id=\"status-inner\">\n            <span id=\"status-text\">\n              {sessionState.loading\n                ? <p className=\"loading\">Loading...</p>\n                : (\n                  dropState === 'HOVER' ? 'Drop it!'\n                  : dropState === 'WAITING' ? (\n                    <>\n                      <p>{file.name}</p>\n                      <p>{file.size}</p>\n                      <p>{file.type}</p>\n                    </>\n                  )\n                  : `id: ${sessionState.id}`\n                )\n              }\n            </span>\n          </div>\n        </div>\n        <div id=\"progress\">\n          <div id=\"progress-first\">\n          </div>\n          <div id=\"progress-second\">\n          </div>\n        </div>\n        <div id=\"message\" className={(dropState === 'WAITING' || sessionState.completed) ? 'open' : ''}>\n          <span id=\"message-text\">\n            {(dropState === 'WAITING' || sessionState.completed) &&\n              <>\n                <span className=\"icon\">✔</span>\n                {'File is ready '}\n                {sessionState.completed && (\n                  <span>\n                    {sessionState.type} {sessionState.size} -\n                    <a target=\"_blank\" className=\"link\" href={sessionState.url} download={sessionState.name}>\n                      Click here to download\n                    </a>\n                  </span>\n                )}\n                {dropState === 'WAITING' && (\n                  <span id='share' className='link'>\n                    {`${document.URL}#${sessionState.id}`}\n                  </span>\n                )}\n              </>\n            }\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}