{"version":3,"sources":["../node_modules/peerjs/dist sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","stopEvent","preventDefault","stopPropagation","getPeerId","hash","window","location","replace","App","_useState","useState","state","_useState2","Object","slicedToArray","appState","setAppState","_useState3","_useState4","dropState","setDropState","useEffect","session","Peer","undefined","debug","console","log","on","peerId","file","connect","label","reliable","data","s","objectSpread","o","d","constructor","ArrayBuffer","dataView","Uint8Array","dataBlob","Blob","type","url","URL","createObjectURL","size","name","connectToHost","react_default","a","createElement","className","style","display","onDragOver","onDragEnter","onDragLeave","onDrop","dataTransfer","files","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","err","return","connection","x","send","listenForPeer","persist","Fragment","concat","target","href","download","document","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b9fb036.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 13;","import React, { useEffect, useState } from 'react';\nimport Peer from 'peerjs';\nimport './App.css';\n\n// TODO tidy state machine\n// TODO error handling / timeouts\n// TODO progress indicator\n// TODO multiple file support\n// TODO \"room\" support\n// TODO support recipient connecting before files dropped\n\nfunction stopEvent (e) {\n  e.preventDefault()\n  e.stopPropagation()\n}\n\nconst getPeerId = () => {\n  const hash = window.location.hash\n  if (hash && typeof hash === 'string')\n    return hash.replace(/\\W/g, '')\n}\n\nfunction App() {\n  const [appState, setAppState] = useState({state: 'registering'})\n  const [dropState, setDropState] = useState()\n  useEffect(\n    () => {\n      const session = new Peer(undefined, {debug: 3})\n      console.log({session})\n      session.on('open', id => {\n        console.log({id})\n        const peerId = getPeerId()\n        setAppState({\n          state: peerId ? 'connectingToHost' : 'waitingForFileSelection',\n          id, session\n        })\n\n        if (peerId) {\n          console.log('need to connect to ' + peerId)\n\n          const connectToHost = peerId => {\n            // make a file and data connection\n            const file = session.connect(peerId, {label: 'FILE', reliable: true})\n            const data = session.connect(peerId, {label: 'DATA'})\n            setAppState(s => ({...s, state: 'waitingToReceive'}))\n\n            file.on('open', (o) => {\n              console.log('file connection open', o);\n              file.on('data', (d) => {\n                console.log('fdata', {d})\n                const file = d.file\n                if (file && file.constructor === ArrayBuffer) {\n                  const dataView = new Uint8Array(file)\n                  const dataBlob = new Blob([dataView], {type: d.type})\n                  const url = window.URL.createObjectURL(dataBlob)\n                  setAppState(s => ({...s, state: 'completed', url, type: d.type, size: d.size, name: d.name, dataBlob}))\n                } else {\n                  console.log('oops')\n                }\n              })\n            })\n\n            data.on('open', (o) => {\n              console.log('data connection open', o);\n              data.on('data', (d) => console.log('ddata', {d}))\n            })\n\n            file.on('error', e => console.log('file error', e))\n            data.on('error', e => console.log('data error', e))\n          }\n\n          connectToHost(peerId)\n        }\n      })\n    },\n    []\n  )\n\n  const listenForPeer = file => {\n    appState.session.on('connection', connection => {\n      if (connection.label === 'FILE') {\n        console.log('incomming file connection');\n        setAppState(s => ({...s, state: 'transferring'}))\n        connection.on('open', (x) => {\n          console.log('incomming file connection open', connection)\n          connection.send({file, name: file.name, size: file.size, type: file.type})\n          setAppState(s => ({...s, state: 'waitingForClientConnections'}))\n        })\n      }\n\n      if (connection.label === 'DATA') {\n        console.log('incomming data connection');\n        connection.on('open', () => {\n          console.log('incomming data connection open', connection)\n          connection.send({name: 'bobx'})\n        })\n      }\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"droparea\"\n        style={\n          appState.state === 'waitingForFileSelection'\n            ? {}\n            : {display: 'none'}\n        }\n        onDragOver={e => {console.log('dragover'); stopEvent(e)}}\n        onDragEnter={e => {\n          console.log('dragenter', e);\n          setDropState('HOVER')\n          stopEvent(e)\n        }}\n        onDragLeave={e => {\n          console.log('dragleave', e);\n          setDropState()\n          stopEvent(e)\n        }}\n        onDrop={e => {\n          console.log('drop', e);\n          console.log('files', e.dataTransfer.files.length)\n          for (const file of e.dataTransfer.files) {\n            console.log(file)\n          }\n          const file = e.dataTransfer.files[0]\n          setDropState()\n          setAppState(s => ({...s, state: 'waitingForClientConnections', file}))\n          listenForPeer(file)\n          stopEvent(e)\n          e.persist()\n        }}\n      />\n      <div id=\"container\">\n        <div id=\"header\">\n          <h1>\n            SendSend\n          </h1>\n          <h2>\n            Peer to peer single file transfer\n          </h2>\n        </div>\n        <div\n          id=\"status\"\n          className={\n            appState.id\n              ? dropState === 'HOVER'\n                ? 'hover'\n                : appState.state === 'waitingToReceive' ? 'waiting' : 'ready'\n              : ''\n          }\n        >\n          <div id=\"status-inner\">\n            <span id=\"status-text\">\n              {appState.state === 'loading'\n                ? <p className=\"loading\">Loading...</p>\n                : (\n                  appState.state === 'waitingForClientConnections' ? (\n                    <>\n                      <p>{appState.file.name}</p>\n                      <p>{appState.file.size}</p>\n                      <p>{appState.file.type}</p>\n                    </>\n                  )\n                  : appState.state === 'transferring' ? 'transferring...'\n                  : dropState === 'HOVER' ? 'Drop it!'\n                  : `id: ${appState.id}`\n                )\n              }\n            </span>\n          </div>\n        </div>\n        <div id=\"progress\">\n          <div id=\"progress-first\">\n          </div>\n          <div id=\"progress-second\">\n          </div>\n        </div>\n        <div id=\"message\" className={(appState.state === 'waitingForClientConnections' || appState.state === 'completed') ? 'open' : ''}>\n          <span id=\"message-text\">\n            {(appState.state === 'waitingForClientConnections' || appState.state === 'completed') &&\n              <>\n                <span className=\"icon\">✔</span>\n                {'File is ready '}\n                {appState.state === 'completed' && (\n                  <span>\n                    {appState.type} {appState.size} -\n                    <a target=\"_blank\" className=\"link\" href={appState.url} download={appState.name}>\n                      Click here to download\n                    </a>\n                  </span>\n                )}\n                {appState.state === 'waitingForClientConnections' && (\n                  <span id='share' className='link'>\n                    {`${document.URL}#${appState.id}`}\n                  </span>\n                )}\n              </>\n            }\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}